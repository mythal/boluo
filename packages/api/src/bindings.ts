// This file has been generated by Specta. DO NOT EDIT.

export type AddChannelMember = { channelId: string; userId: string; characterName?: string };

export type AppSettings = {
  mediaUrl: string;
  appUrl: string;
  siteUrl: string;
  sentryDsn: string | null;
};

export type BasicInfo = { version: string };

export type Channel = {
  id: string;
  name: string;
  topic: string;
  spaceId: string;
  created: string;
  isPublic: boolean;
  defaultDiceType: string;
  defaultRollCommand: string;
  isDocument: boolean;
  type: ChannelType;
};

export type ChannelMember = {
  userId: string;
  channelId: string;
  joinDate: string;
  characterName: string;
  isMaster: boolean;
  textColor: string | null;
};

export type ChannelMemberWithUser = { member: ChannelMember; user: User };

export type ChannelMembers = {
  members: MemberWithUser[];
  colorList: Partial<{ [key in string]: string }>;
  heartbeatMap: Partial<{ [key in string]: number }>;
  selfIndex: number | null;
};

export type ChannelType = 'IN_GAME' | 'OUT_OF_GAME' | 'DOCUMENT';

export type ChannelWithMaybeMember = { channel: Channel; member: ChannelMember | null };

export type ChannelWithMember = { channel: Channel; member: ChannelMember };

export type ChannelWithRelated = {
  channel: Channel;
  members: MemberWithUser[];
  space: Space;
  colorList: Partial<{ [key in string]: string }>;
  heartbeatMap: Partial<{ [key in string]: number }>;
};

export type CheckChannelName = { spaceId: string; name: string };

export type CheckEmailExists = { email: string };

export type CheckResult<T> = { type: 'Ok'; value: T } | { type: 'Error'; message: string };

export type CheckUsernameExists = { username: string };

export type ClientEvent =
  | { type: 'PREVIEW'; preview: PreviewPost }
  | { type: 'STATUS'; kind: StatusKind; focus: string[] };

export type ConnectionError = 'NOT_FOUND' | 'NO_PERMISSION' | 'INVALID_TOKEN' | 'UNEXPECTED';

export type ConnectionState = {
  rtt_ms: number;
  /**
   * Connection count in the pool.
   *
   * Always 1 if the connection is not pooled.
   */
  count: number;
};

export type CreateChannel = {
  spaceId: string;
  name: string;
  characterName?: string;
  defaultDiceType: string | null;
  isPublic: boolean;
  type: ChannelType | null;
};

export type CreateSpace = {
  name: string;
  password: string | null;
  description: string;
  defaultDiceType: string | null;
  firstChannelName: string;
  firstChannelType: ChannelType | null;
};

export type DiskInfo = { name: string; mount_point: string; available: number; total: number };

export type EditChannel = {
  channelId: string;
  name: string | null;
  topic: string | null;
  defaultDiceType: string | null;
  defaultRollCommand: string | null;
  grantMasters?: string[];
  removeMasters?: string[];
  isPublic: boolean | null;
  isDocument: boolean | null;
  type: ChannelType | null;
};

export type EditChannelMember = {
  channelId: string;
  characterName: string | null;
  textColor: string | null;
};

export type EditMessage = {
  messageId: string;
  name: string;
  text: string;
  entities: JsonValue[];
  inGame: boolean;
  isAction: boolean;
  mediaId: string | null;
  color?: string;
};

export type EditSpace = {
  spaceId: string;
  name: string | null;
  description: string | null;
  defaultDiceType: string | null;
  explorable: boolean | null;
  isPublic: boolean | null;
  allowSpectator: boolean | null;
  grantAdmins?: string[];
  removeAdmins?: string[];
};

export type EditUser = {
  nickname: string | null;
  bio: string | null;
  avatar: string | null;
  defaultColor: string | null;
};

export type EventId = {
  /**
   * The timestamp in milliseconds
   * The value will not exceed 2^53 - 1, which is safe for JavaScript
   */
  timestamp: number;
  /**
   * Preserved for future use
   */
  node: number;
  seq: number;
};

export type Export = { channelId: string; after?: string | null };

export type GetMe = {
  user: User;
  settings: JsonValue;
  myChannels: ChannelWithMember[];
  mySpaces: SpaceWithMember[];
};

export type GetMessagesByChannel = {
  channelId: string;
  before: number | null;
  limit: number | null;
};

export type GrantOrRemoveChannelMaster = {
  channelId: string;
  userId: string;
  grantOrRevoke: GrantOrRevoke;
};

export type GrantOrRevoke = 'GRANT' | 'REVOKE';

export type HealthCheck = {
  timestamp_sec: number;
  disks: DiskInfo[];
  memory_total: number;
  memory_used: number;
  cache: CheckResult<ConnectionState>;
  database: CheckResult<ConnectionState>;
};

export type JoinChannel = { channelId: string; characterName?: string };

export type JoinSpace = { spaceId: string; token: string | null };

export type JsonValue =
  | null
  | boolean
  | number
  | string
  | JsonValue[]
  | Partial<{ [key in string]: JsonValue }>;

export type KickFromChannel = { spaceId: string; channelId: string; userId: string };

export type KickFromSpace = { spaceId: string; userId: string };

export type Login = { username: string; password: string; withToken?: boolean };

export type LoginReturn = { me: GetMe; token: string | null };

export type Media = {
  id: string;
  mimeType: string;
  uploaderId: string;
  filename: string;
  originalFilename: string;
  hash: string;
  size: number;
  description: string;
  source: string;
  created: string;
};

export type MediaQuery = { filename: string | null; id: string | null; download?: boolean };

export type Member = { channel: ChannelMember; space: SpaceMember };

export type MemberWithUser = { channel: ChannelMember; space: SpaceMember; user: User };

export type Message = {
  id: string;
  senderId: string;
  channelId: string;
  parentMessageId: string | null;
  name: string;
  mediaId: string | null;
  seed: number[];
  inGame: boolean;
  isAction: boolean;
  isMaster: boolean;
  pinned: boolean;
  tags: string[];
  folded: boolean;
  text: string;
  whisperToUsers: string[] | null;
  entities: JsonValue;
  created: string;
  modified: string;
  posP: number;
  posQ: number;
  pos: number;
  /**
   * The color of the message
   *
   * The string is not always a hex color, it can be a preset color name like "preset:orange",
   * or refer to a character's name like "char:DM".
   *
   * If the string contains a semicolon, the second part is for the dark mode.
   */
  color: string;
};

export type MessageMoveToMode = 'TOP' | 'BOTTOM';

export type MoveMessageBetween = {
  messageId: string;
  range: [[number, number] | null, [number, number] | null];
  channelId: string;
};

export type MyCustomType = { my_field: string };

export type NewMessage = {
  messageId: string | null;
  previewId: string | null;
  channelId: string;
  name: string;
  text: string;
  entities: JsonValue[];
  inGame: boolean;
  isAction: boolean;
  mediaId: string | null;
  whisperToUsers: string[] | null;
  pos: [number, number] | null;
  color?: string;
};

export type PreSign = { filename: string; mimeType: string; size: number };

export type PreSignResult = { url: string; mediaId: string };

export type Preview = {
  id: string;
  senderId: string;
  channelId: string;
  parentMessageId: string | null;
  name: string;
  mediaId: string | null;
  inGame: boolean;
  isAction: boolean;
  isMaster: boolean;
  clear: boolean;
  text: string | null;
  whisperToUsers: string[] | null;
  entities: JsonValue[];
  pos: number;
  editFor: string | null;
  edit: PreviewEdit | null;
};

export type PreviewEdit = { time: string; p: number; q: number };

export type PreviewPost = {
  id: string;
  channelId: string;
  name: string;
  mediaId: string | null;
  inGame: boolean;
  isAction: boolean;
  text: string | null;
  clear?: boolean;
  entities: JsonValue[];
  editFor?: string | null;
  edit?: PreviewEdit | null;
};

export type Proxy = { name: string; url: string; region: string };

export type QuerySpace = { id: string; token: string | null };

export type QueryUser = { id: string | null };

export type Register = { email: string; username: string; nickname: string; password: string };

export type ResetPassword = { email: string; lang: string | null };

export type ResetPasswordConfirm = { token: string; password: string };

export type ResetPasswordTokenCheck = { token: string };

export type SearchParams = { search: string };

export type Settings = { enterSend?: boolean; expandDice?: boolean };

export type Space = {
  id: string;
  name: string;
  description: string;
  created: string;
  modified: string;
  ownerId: string;
  isPublic: boolean;
  language: string;
  defaultDiceType: string;
  explorable: boolean;
  allowSpectator: boolean;
  latestActivity: string;
};

export type SpaceMember = { userId: string; spaceId: string; isAdmin: boolean; joinDate: string };

export type SpaceMemberWithUser = { space: SpaceMember; user: User };

export type SpaceWithMember = { space: Space; member: SpaceMember; user: User };

export type SpaceWithRelated = {
  space: Space;
  members: Partial<{ [key in string]: SpaceMemberWithUser }>;
  channels: Channel[];
  channelMembers: Partial<{ [key in string]: ChannelMember[] }>;
  usersStatus: Partial<{ [key in string]: UserStatus }>;
};

export type StatusKind = 'OFFLINE' | 'AWAY' | 'ONLINE';

export type Token = { token: string | null };

export type Update = { mailbox: string; id: EventId; body: UpdateBody };

export type UpdateBody =
  | { type: 'NEW_MESSAGE'; channelId: string; message: Message; previewId: string | null }
  | { type: 'MESSAGE_DELETED'; messageId: string; channelId: string; pos: number }
  | { type: 'MESSAGE_EDITED'; channelId: string; message: Message; oldPos: number }
  | { type: 'MESSAGE_PREVIEW'; channelId: string; preview: Preview }
  | { type: 'CHANNEL_DELETED'; channelId: string }
  | { type: 'CHANNEL_EDITED'; channelId: string; channel: Channel }
  | { type: 'MEMBERS'; channelId: string; members: MemberWithUser[] }
  | { type: 'BATCH'; updates: string[] }
  | { type: 'INITIALIZED' }
  | { type: 'STATUS_MAP'; statusMap: Partial<{ [key in string]: UserStatus }>; spaceId: string }
  | { type: 'SPACE_UPDATED'; spaceWithRelated: SpaceWithRelated }
  | { type: 'ERROR'; code: ConnectionError; reason: string }
  | { type: 'APP_UPDATED'; version: string };

export type Upload = { filename: string; mimeType: string | null; size?: number };

export type User = {
  id: string;
  username: string;
  nickname: string;
  bio: string;
  joined: string;
  avatarId: string | null;
  /**
   * See `Message::color`
   */
  defaultColor: string;
};

export type UserStatus = { timestamp: number; kind: StatusKind; focus: string[] };
