name: Release
on:
  pull_request:
    types:
      - opened
      - synchronize
# on:
#   push:
#     branches:
#       - production
#       - master
#       - main
#       - release-*
jobs:
  image:
    name: Build image
    runs-on: ubuntu-latest
    permissions:
      id-token: "write"
      contents: "read"
    strategy:
      matrix:
        attribute: ["site-image", "spa-image", "legacy-image", "server-image"]
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
            experimental-features = ca-derivations

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - name: Build and push site image
        run: nix --accept-flake-config --extra-experimental-features ca-derivations --print-build-logs build --cores 0 .#${{ matrix.attribute }}

  # server-image:
  #   name: Server Image
  #   runs-on: ubuntu-latest
  #   steps:
  #     # https://github.com/actions/checkout
  #     - name: Checkout
  #       uses: actions/checkout@v5

  #     - name: Install Nix
  #       uses: nixbuild/nix-quick-install-action@v30
  #       with:
  #         nix_conf: |
  #           keep-env-derivations = true
  #           keep-outputs = true

  #     - name: Restore and save Nix store
  #       uses: nix-community/cache-nix-action@v6
  #       with:
  #         # restore and save a cache using this key
  #         primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
  #         # if there's no cache hit, restore a cache by this prefix
  #         restore-prefixes-first-match: nix-${{ runner.os }}-
  #         # collect garbage until the Nix store size (in bytes) is at most this number
  #         # before trying to save a new cache
  #         # 1G = 1073741824
  #         gc-max-store-size-linux: 1G
  #         # do purge caches
  #         purge: true
  #         # purge all versions of the cache
  #         purge-prefixes: nix-${{ runner.os }}-
  #         # created more than this number of seconds ago
  #         purge-created: 0
  #         # or, last accessed more than this number of seconds ago
  #         # relative to the start of the `Post Restore and save Nix store` phase
  #         purge-last-accessed: 0
  #         # except any version with the key that is the same as the `primary-key`
  #         purge-primary-key: never

  #     - name: Push server image
  #       run: nix run --accept-flake-config --cores 0 --print-build-logs .#push-server-image

  # staging:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   needs: images
  #   if: github.ref == 'refs/heads/master'
  #   environment:
  #     name: staging
  #     url: https://boluo-site-staging.fly.dev
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v5

  #     - name: Nix Setup
  #       uses: ./.github/actions/nix-setup
  #       with:
  #         authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

  #     - name: Deploy site to staging
  #       run: nix --accept-flake-config --log-format raw -L run .#deploy-site-staging
  #       env:
  #         FLY_API_TOKEN: ${{ secrets.FLY_IO_TOKEN }}

  #     - name: Deploy server to staging
  #       run: nix --accept-flake-config --log-format raw -L run .#deploy-server-staging
  #       env:
  #         FLY_API_TOKEN: ${{ secrets.FLY_IO_TOKEN }}

  # production:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   needs: images
  #   if: github.ref == 'refs/heads/production'
  #   environment:
  #     name: production
  #     url: https://site.boluochat.com
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v5

  #     - name: Nix Setup
  #       uses: ./.github/actions/nix-setup
  #       with:
  #         authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

  #     - name: Deploy site to production
  #       run: nix --accept-flake-config --log-format raw -L run .#deploy-site-production
  #       env:
  #         FLY_API_TOKEN: ${{ secrets.FLY_IO_TOKEN }}

  #     - name: Deploy server to production
  #       run: nix --accept-flake-config --log-format raw -L run .#deploy-server-production
  #       env:
  #         FLY_API_TOKEN: ${{ secrets.FLY_IO_TOKEN }}
