FROM node:lts AS base
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED 1
RUN npm add -g pnpm

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY ./pnpm-lock.yaml ./pnpm-lock.yaml
RUN pnpm fetch
COPY package.json pnpm-workspace.yaml nx.json version.json .eslintrc.js .
COPY ./apps/site ./apps/site
COPY ./apps/server/bindings ./apps/server/bindings
COPY ./packages/ ./packages/
RUN pnpm install --frozen-lockfile
RUN pnpm install -r --frozen-lockfile

# https://github.com/vercel/next.js/issues/45383
ENV BACKEND_URL https://boluo.chat

RUN pnpm exec nx run site:build

# Production image, copy all the files and run next
FROM node:lts AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/apps/site/.next/standalone ./
WORKDIR /app/apps/site/
COPY --from=builder --chown=nextjs:nodejs /app/apps/site/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "server.js"]
